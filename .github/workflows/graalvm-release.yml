name: GraalVM Release
on:
  release:
    types: [published]
jobs:
  build:
    name: 'Build with Graal on ${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        gu-binary: [ gu, gu.cmd ]
        exclude:
          - os: ubuntu-latest
            gu-binary: gu.cmd
          - os: macos-latest
            gu-binary: gu.cmd
          - os: windows-latest
            gu-binary: gu
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Semantic Version
        id: version
        uses: ncipollo/semantic-version-action@v1
      - name: 'Add Developer Command Prompt for Microsoft Visual C++ '
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1
      - name: Setup GraalVM CE
        uses: DeLaGuardo/setup-graalvm@3.1
        with:
          graalvm-version: 22.3.0.java11
      - name: Install Native Image
        run: ${{ matrix.gu-binary }} install native-image
      - uses: gradle/gradle-command-action@v2
        with:
          arguments: :pierrot:nativeCompile
      - uses: actions/upload-artifact@v2
        with:
          name: pierrot-${{ matrix.os }}
          path: pierrot-*.zip
      - name: Docker login (Linux only)
        if: ${{ runner.os == 'Linux' }}
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKERHUB_REGISTRY_URL }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Build And Push Docker Image Release (master and Linux only)
        if: github.ref == 'refs/heads/master' && runner.os == 'ubuntu-latest'
        env:
          DOCKER_REPOSITORY_PATH: ${{ secrets.DOCKERHUB_REPOSITORY_PATH }}
          DOCKER_REGISTRY_URL: ${{ secrets.DOCKERHUB_REGISTRY_URL }}
        run: |
          export DOCKER_IMAGE=`echo "${DOCKERHUB_REGISTRY_URL}/${DOCKERHUB_REPOSITORY_PATH}/pierrot" | sed -e 's#//#/#' -e 's#^/##'`
          ./gradlew :pierrot:dockerPushNative --no-daemon -Pversion="${{ steps.version.outputs.tag }}" -Prelease=true
  upload_to_release:
    name: Upload to Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      id: download
    - name: Semantic Version
      id: version
      uses: ncipollo/semantic-version-action@v1
    - name: Release Script
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_VERSION: ${{ steps.version.outputs.tag }}
        UPLOAD_URL: https://uploads.github.com/repos/${{ github.event.repository.full_name }}/releases/${{ github.event.release.id }}/assets
        ARTIFACT_DIRECTORY:  ${{steps.download.outputs.download-path}}
      run: .github/workflows/upload_to_release.sh
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Sleep 10 seconds until the reelases are available
      run: sleep 10
    - uses: gradle/gradle-command-action@v2
      env:
        SDKMAN_KEY: ${{ secrets.SDKMAN_KEY }}
        SDKMAN_TOKEN: ${{ secrets.SDKMAN_TOKEN }}
      with:
        # skip announce while under active development
        # change to sdkMajorRelease once stabilized
        arguments: :pierrot:sdkReleaseVersion :pierrot:sdkDefaultVersion -Pversion="${{ steps.version.outputs.tag }}"
    - uses: sdkman/sdkman-action@master
      with:
        candidate: pierrot
        version: ${{ steps.version.outputs.tag }}
    - run: pierrot --help
