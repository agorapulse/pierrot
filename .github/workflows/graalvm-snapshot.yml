name: GraalVM Snapshot
on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  build:
    name: 'Build with Graal on ${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        gu-binary: [ gu, gu.cmd ]
        exclude:
          - os: ubuntu-latest
            gu-binary: gu.cmd
          - os: macos-latest
            gu-binary: gu.cmd
          - os: windows-latest
            gu-binary: gu
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.m2/repository
          key: ${{ runner.os }}-gradle-test-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-test-

      - name: 'Add Developer Command Prompt for Microsoft Visual C++ '
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup GraalVM CE
        uses: DeLaGuardo/setup-graalvm@3.1
        with:
          graalvm-version: 21.2.0.java11

      - name: Install Native Image
        run: ${{ matrix.gu-binary }} install native-image

      - name: Build Native Image Snapshot
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./gradlew :guide:html2text
          ./gradlew :pierrot:buildLayers --no-daemon
          ./gradlew :pierrot:shadowJar --no-daemon
          ./gradlew :jreleaserAssemble --no-daemon

      - name: Verify Binary
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS'}}
        env:
          GITHUB_TOKEN: ${{ secrets.AGORAPULSE_BOT_PERSONAL_TOKEN }}
          GITHUB_ORG: agorapulse
        run: |
          CMD_BASEDIR=./build/jreleaser/assemble/pierrot/native-image
          ${CMD_BASEDIR}/pierrot search repo:agorapulse/pierrot filename:.testfile
          ${CMD_BASEDIR}/pierrot status repo:agorapulse/pierrot author:musketyr
          ${CMD_BASEDIR}/pierrot init -b chore/testbranch -t "Test Title" -m "Test Message" --project "Test Project" --workspace testws
          cd testws
          cat pierrot.yml
          grep -q branch pierrot.yml
          grep -q testbranch pierrot.yml
          grep -q title pierrot.yml
          grep -q message pierrot.yml
          grep -q project pierrot.yml
          cd ..
          ${CMD_BASEDIR}/pierrot push --workspace testws

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            apps/pierrot/build/jreleaser/assemble/pierrot/native-image/*.zip

  # Collect all executables and release
  release:
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v2

      - name: 'Set up Java'
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'

      - name: 'Cache Maven packages'
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.m2/repository
          key: ${{ runner.os }}-gradle-test-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-test-

      - name: 'Release with JReleaser'
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_DOCKER_DEFAULT_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          JRELEASER_DOCKER_DEFAULT_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: ./gradlew -PartifactsDir=artifacts :jreleaserFullRelease
