/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2021 Vladimir Orany.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'org.kordamp.gradle.groovy-project'
    id 'org.kordamp.gradle.checkstyle'
    id 'org.kordamp.gradle.codenarc'
    id 'org.kordamp.gradle.coveralls'
    id 'io.github.gradle-nexus.publish-plugin'
    id 'org.jreleaser'
    id 'com.google.osdetector'
}

if (!project.hasProperty('ossrhUsername'))      ext.ossrhUsername       = System.getenv('SONATYPE_USERNAME') ?: '**UNDEFINED**'
if (!project.hasProperty('ossrhPassword'))      ext.ossrhPassword       = System.getenv('SONATYPE_PASSWORD') ?: '**UNDEFINED**'
if (!project.hasProperty('signingKeyId'))       ext.signingKeyId        = System.getenv('SIGNING_KEY_ID') ?: '**UNDEFINED**'
if (!project.hasProperty('signingPassword'))    ext.signingPassword     = System.getenv('SIGNING_PASSWORD') ?: '**UNDEFINED**'
if (!project.hasProperty('signingSecretKey'))   ext.signingSecretKey    = System.getenv('SIGNING_SECRET_KEY_PATH') ? rootProject.file(System.getenv('SIGNING_SECRET_KEY_PATH')).text : '**UNDEFINED**'

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name          = 'Pierrot'
        vendor        = 'Agorapulse'
        description   = 'Pierrot - Multi-repository GitHub Governance Tool'
        inceptionYear = '2021'

        links {
            website      = 'https://github.com/' + slug
            issueTracker = 'https://github.com/' + slug + '/issues'
            scm          = 'https://github.com/' + slug + '.git'
        }

        people {
            person {
                id    = 'musketyr'
                name  = 'Vladimir Orany'
                roles = ['developer']
            }
        }

        repositories {
            repository {
                name = 'localRelease'
                url  = '' + project.rootProject.buildDir + '/repos/local/release'
            }
            repository {
                name = 'localSnapshot'
                url  = '' + project.rootProject.buildDir + '/repos/local/snapshot'
            }
        }
    }

    licensing {
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    publishing {
        signing {
            enabled =  true
            keyId = signingKeyId
            secretKey = signingSecretKey
            password = signingPassword
        }

        releasesRepository  = 'localRelease'
        snapshotsRepository = 'localSnapshot'
    }

    quality {
        checkstyle {
            toolVersion = '8.27'
        }

        codenarc {
            toolVersion = '1.5'
        }
    }

    docs {
        javadoc {
            autoLinks {
                enabled = false
            }
        }
        groovydoc {
            enabled = false
            aggregate  {
                enabled = false
            }
        }
        sourceHtml {
            enabled = false
        }
    }

}

nexusPublishing {
    repositories {
        sonatype {
            username = ossrhUsername
            password = ossrhPassword
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/release"  }
    }

    license {
        exclude '**/*.json'
        exclude '***.yml'
        exclude '**/*.txt'
    }
}

gradleProjects {
    subprojects {
        dirs(['libs', 'examples', 'apps']) { Project subproject ->
            java {
                sourceCompatibility = JavaVersion.VERSION_11
                targetCompatibility = JavaVersion.VERSION_11
            }

            repositories {
                mavenCentral()
            }

            // location independent tests (useful for stable CI builds)
            tasks.withType(Test){
                useJUnitPlatform()
                systemProperty 'user.timezone', 'UTC'
                systemProperty 'user.language', 'en'
            }

            tasks.withType(JavaCompile) {
                options.encoding = "UTF-8"
                options.compilerArgs.add('-parameters')
            }

            tasks.withType(GroovyCompile) {
                groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
            }

            dependencies {
                api platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
                implementation platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
                compileOnly platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
                testImplementation platform("org.codehaus.groovy:groovy-bom:$groovyVersion")
            }

            // useful for IntelliJ
            task cleanOut(type: Delete) {
                delete file('out')
            }

            clean.dependsOn cleanOut
        }

        dir('examples') {
            config {
                publishing {
                    enabled = false
                }
            }
        }

        dir('libs') {
            processResources {
                filesMatching('**/org.codehaus.groovy.runtime.ExtensionModule') {
                    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [VERSION: version])
                }
            }

            jar {
                manifest.attributes provider: 'gradle'
            }

            dependencies {
                testImplementation group: 'org.spockframework', name: 'spock-core', version: spockVersion
            }
        }
    }
}


check.dependsOn('aggregateCheckstyle', 'aggregateCodenarc', 'aggregateAllTestReports', 'coveralls')

jreleaser {
    dryrun = (rootProject.findProperty('jreleaser.dryrun') ?: false).toBoolean()

    environment {
        properties.put('artifactsDir', 'build/jreleaser/assemble/pierrot/native-image')
    }

    release {
        github {
            branch = 'master'
            overwrite = true
            tagName = '{{projectVersion}}'
            skipTag = true
            changelog {
                formatted = 'ALWAYS'
                format = '- {{commitShortHash}} {{commitTitle}}'
                contributors {
                    format = '- {{contributorName}}'
                }
            }
        }
    }

    assemble {
        nativeImage {
            pierrot {
                active = 'ALWAYS'
                 args = ['--no-fallback',
                    '-H:ConfigurationFileDirectories=apps/pierrot/build/docker/layers/resources',
                    '-H:Class=com.agorapulse.pierrot.cli.PierrotCommand',
                    '--trace-object-instantiation=java.io.FileDescriptor']
                mainJar {
                    path = 'apps/pierrot/build/libs/{{distributionName}}-{{projectVersion}}-all.jar'
                }
                files {
                    pattern = 'LICENSE'
                }
            }
        }
    }

    distributions {
        pierrot {
            distributionType = 'NATIVE_IMAGE'
            artifact {
                path = '{{artifactsDir}}/{{distributionName}}-{{projectVersion}}-osx-x86_64.zip'
                platform = 'osx-x86_64'
            }
            artifact {
                path = '{{artifactsDir}}/{{distributionName}}-{{projectVersion}}-linux-x86_64.zip'
                platform = 'linux-x86_64'
            }
            artifact {
                path = '{{artifactsDir}}/{{distributionName}}-{{projectVersion}}-windows-x86_64.zip'
                platform = 'windows-x86_64'
            }
            docker {
                active = 'ALWAYS'
                baseImage = 'gcr.io/distroless/cc-debian10'
                imageNames = [
                  '{{repoOwner}}/{{distributionName}}:{{tagName}}',
                  '{{repoOwner}}/{{distributionName}}:latest'
                ]
                repository {
                    owner = 'agorapulse'
                    name = 'pierrot-docker'
                }
            }
        }
    }
}
